# -*- coding: utf-8 -*-
"""분석지원

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HkcrBxjjH3g9UW3fQ6ioDjmO_R7z2dXT

셋
"""

# Commented out IPython magic to ensure Python compatibility.
# 모듈 임포트 
import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
import re 
import warnings
warnings.filterwarnings('ignore')
import matplotlib.font_manager as fm

# 나눔 고딕  다운로드하기 
# 처음 연걸하면 수행해야하는 작업  안하면 나눔고딕 안깔림 

# !apt-get update -qq
# !apt-get install fonts-nanum* -qq

path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'  # 설치된 나눔글꼴중 원하는 녀석의 전체 경로를 가져오자
# path = '/usr/share/fonts/truetype/humor-sans/Humor-Sans.ttf'
font_name = fm.FontProperties(fname=path, size=10).get_name()
print(font_name)
plt.rc('font', family=font_name)

# 우선 fm._rebuild() 를 해주고
fm._rebuild() # 이 과정을 해줘야 제대로 set 이 된다.
plt.rcParams['font.family'] = 'NanumGothic' #plt 폰트 설정해주기

# df 형성 
real_df = pd.read_csv('/content/dataset1.csv')
body_5000= pd.read_csv('/content/body_5000.csv')
body_10000=  pd.read_csv('/content/body_5000_10000.csv')
title_5000=  pd.read_csv('/content/title_.csv')
title_10000 = pd.read_csv('/content/title전처리_5045.csv')

real_df.head()

body_5000.head()

body_10000.head()

title_5000.head()

title_10000.head()

"""# 제목 형태소 분석 결과 병합"""

title_df = pd.concat([title_10000,title_5000],axis=0)
body_df = pd.concat([body_5000,body_10000],axis=0)
body_df.head()

title_df = title_df.reset_index()
body_df = body_df.reset_index()

title_df = title_df.iloc[:,2]
body_df = body_df.iloc[:,2]

body_df

# 중복제거 
title_lst = []
for v in title_df:
  if v not in title_df:
    title_lst.append(v)

title_lst

# 중복제거  body
body_lst = []
for v in body_df:
  if v not in body_df:
    body_lst.append(v)

body_lst

title_df = pd.Series(title_lst)
body_df = pd.Series(body_lst)

# 앞뒤 [] 제거 
def clean_(x):
  for i in range(len(x)):
    x[i] = x[i].replace(x[i][0],"")
    x[i] = x[i].replace(x[i][-1],'')

  return x

title_df = pd.Series(clean_(title_df))
body_df = pd.Series(clean_(body_df))

body_df.head(10)

#정규식 만들기 
# 특수문자 제거하기 
 
def cleanText(x):
 
    #텍스트에 포함되어 있는 특수 문자 제거
 
    text = re.sub('[-=+#/\?:^$@*\"※~&%ㆍ!』\\‘|\(\)\[\]\<\>`\'\》☆●♥]', '', x) # .e두번 이상 반복되면 제거 
 
    return text

for i in range(len(title_df)):
  title_df[i] = cleanText(title_df[i])

title_df

for i in range(len(body_df)):
  body_df[i] = cleanText(body_df[i])

body_df

d = []
for w in range(len(title_df)):
  a = title_df[w].split(' ')
  d.append(a)

d_b = []
for w in range(len(body_df)):
  b = body_df[w].split(' ')
  d_b.append(b)

# d = []
# for w in range(len(title_df)):
#   a = title_df[w].split(' ')
#   d.append(a)

# d = pd.DataFrame(d)  # 분해한 형태소 데이터 프레임 형성

# 단어를  구분을 효과적으로 못하는  경우가 있으므로 한나눔을 한번 더 활용해 명사 추출 
!pip install konlpy # 설치 
from konlpy.tag import Hannanum

hannanum = Hannanum()

han_lst = []

for j in range(len(title_df)):
  a= d[j]
  
  han_lst.append(a)

han_lst_body = []

for j in range(len(body_df)):
  b= d_b[j]
  
  han_lst_body.append(b)

d

han_lst

han_lst_body

lst_2 = []
for i in han_lst:
  for w in i:
  
    w = w.replace(' nbsp;','') # 개행 제거 
    
  lst_2.append(i)

lst_2_body = []
for i in han_lst_body:
  for w in i:
  
    w = w.replace(' nbsp;','') # 개행 제거 
    
  lst_2_body.append(i)

lst_2

lst_2_body

#### ... 제거 
for i in range(len(lst_2)):
  for j in range(len(lst_2[i])):
    lst_2[i][j] = re.sub('[.{2,10}]','',lst_2[i][j])

#### ... 제거 body
for i in range(len(lst_2_body)):
  for j in range(len(lst_2_body[i])):
    lst_2_body[i][j] = re.sub('[.{2,10}]','',lst_2_body[i][j])

# 한나눔 모듈 사용해서 명사 추출하기 
# 이유 커뮤니티라서 문법이 굉장히 자유분방하고 해석하기 어려운 용언들이 많음 .
lst_3 = []
for i in range(len(lst_2)):
  lst_4 = []
  for j in range(len(lst_2[i])):
    a__a = hannanum.nouns(lst_2[i][j])
    lst_4.append(a__a)
  lst_3.append(lst_4)

# 한나눔 모듈 사용해서 명사 추출하기 
# 이유 커뮤니티라서 문법이 굉장히 자유분방하고 해석하기 어려운 용언들이 많음 .
#이 과정 시간 좀 걸림 
lst_3_body = []
for i in range(len(lst_2_body)):
  lst_4_body = []
  for j in range(len(lst_2_body[i])):
    a__a_body = hannanum.nouns(lst_2_body[i][j])
    lst_4_body.append(a__a_body)
  lst_3_body.append(lst_4_body)

lst_anal = []
for i in range(len(lst_2)):
  for j in range(len(lst_2[i])):
    a__a = hannanum.nouns(lst_2[i][j])
    lst_anal.append(a__a)

lst_anal_body = []
for i in range(len(lst_2_body)):
  for j in range(len(lst_2_body[i])):
    a__a_body = hannanum.nouns(lst_2_body[i][j])
    lst_anal_body.append(a__a_body)

lst_anal

lst_3

title_decom_df = pd.DataFrame(lst_3)
body_decom_df = pd.DataFrame(lst_3_body)

title_decom_df

body_decom_df =body_decom_df.iloc[:10067,:]

body_decom_df

real_title_df = real_df.drop(['postId','title','body'],axis=1)
real_title_df
real_body_df = real_df.drop(['postId','title','body'],axis=1)
real_body_df

real_title_df = real_title_df.iloc[:10067,:] # 같은 문자열로 만들기 위해 
real_body_df = real_body_df.iloc[:10067,:] # 같은 문자열로 만들기 위해 

real_title_df = pd.concat([real_title_df,title_decom_df],axis=1)
real_body_df = pd.concat([real_body_df,body_decom_df],axis=1)

real_body_df

for i in range(len(real_title_df)):
  real_title_df['date'][i] = real_title_df['date'][i][-5:]

for i in range(len(real_body_df)):
  real_body_df['date'][i] = real_body_df['date'][i][-5:]

real_title_df

real_body_df

#리스트 제거하기 
lst_remove = []
for i in lst_anal:
  for j in i:
    lst_remove.append(j)
    
lst_remove_body = []
for i in lst_anal_body:
  for j in i:
    lst_remove_body.append(j)

lst_remove

lst_remove_body

title_counts = pd.Series(lst_remove).value_counts()
body_counts = pd.Series(lst_remove_body).value_counts()

title_counts_df= pd.DataFrame(title_counts)
new_df = title_counts_df.reset_index()

body_counts_df= pd.DataFrame(body_counts)
new_df_body = body_counts_df.reset_index()

new_df.columns = ['norm','count']
new_df_body.columns = ['norm','count']

#데이터 너무 많음 
# fig, ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
# sns.barplot(data=new_df,x='norm',y='count')

# new_df[new_df['count']==1] # 10135개 
new_df_1 = new_df[new_df['count']!=1]

# new_df[new_df['count']==2] # 1349개 
new_df_2 = new_df_1[new_df_1['count']!=2]

# new_df[new_df['count']==3] # 514개 
new_df_3 = new_df_2[new_df_2['count']!=3]

# new_df[new_df['count']==4] # 289개 
new_df_3 = new_df_3[new_df_3['count']!=4]

new_df_200 = new_df.iloc[:200,:]
new_df_200

new_df_body_200 = new_df_body.iloc[:200,:]
new_df_body_200

"""# TITTEL 상위 200 """

def visual(x):
  fig, ax = plt.subplots(nrows=6,ncols=1,figsize=(24,15))
  sns.barplot(data=x,x='norm',y='count',ax=ax[0])
  sns.barplot(data=x.iloc[:40],x='norm',y='count',ax=ax[1])
  sns.barplot(data=x.iloc[40:80],x='norm',y='count',ax=ax[2])
  sns.barplot(data=x.iloc[80:120],x='norm',y='count',ax=ax[3])
  sns.barplot(data=x.iloc[120:160],x='norm',y='count',ax=ax[4])
  sns.barplot(data=x.iloc[160:200],x='norm',y='count',ax=ax[5])

fig, ax = plt.subplots(nrows=6,ncols=1,figsize=(24,15))
sns.barplot(data=new_df_200,x='norm',y='count',ax=ax[0])
sns.barplot(data=new_df_200.iloc[:40],x='norm',y='count',ax=ax[1])
sns.barplot(data=new_df_200.iloc[40:80],x='norm',y='count',ax=ax[2])
sns.barplot(data=new_df_200.iloc[80:120],x='norm',y='count',ax=ax[3])
sns.barplot(data=new_df_200.iloc[120:160],x='norm',y='count',ax=ax[4])
sns.barplot(data=new_df_200.iloc[160:200],x='norm',y='count',ax=ax[5])

# 20200701부터 20201012 까지

fig, ax = plt.subplots(nrows=1,ncols=1,figsize=(15,7))
sns.barplot(data=new_df_200.iloc[:40],x='norm',y='count')
ax.tick_params(axis='x',labelrotation=-90)

fig, ax = plt.subplots(nrows=1,ncols=1,figsize=(15,7))
sns.barplot(data=new_df_200.iloc[40:80],x='norm',y='count')
ax.tick_params(axis='x',labelrotation=-90)

"""#body 상위 200"""

fig, ax = plt.subplots(nrows=6,ncols=1,figsize=(24,15))
sns.barplot(data=new_df_body_200,x='norm',y='count',ax=ax[0])
sns.barplot(data=new_df_body_200.iloc[:40],x='norm',y='count',ax=ax[1])
sns.barplot(data=new_df_body_200.iloc[40:80],x='norm',y='count',ax=ax[2])
sns.barplot(data=new_df_body_200.iloc[80:120],x='norm',y='count',ax=ax[3])
sns.barplot(data=new_df_body_200.iloc[120:160],x='norm',y='count',ax=ax[4])
sns.barplot(data=new_df_body_200.iloc[160:200],x='norm',y='count',ax=ax[5])

plt.show()

# 20200701부터 20201012 까지

fig, ax = plt.subplots(nrows=1,ncols=1,figsize=(15,7))
sns.barplot(data=new_df_body_200.iloc[:40],x='norm',y='count')
ax.tick_params(axis='x',labelrotation=-90)

fig, ax = plt.subplots(nrows=1,ncols=1,figsize=(15,7))
sns.barplot(data=new_df_body_200.iloc[40:80],x='norm',y='count')
ax.tick_params(axis='x',labelrotation=-90)

"""## 상위 200개 중에서 공통적으로 겹치는 키워드는 무엇이고 
## 평균에 따라 순위 

"""

merge_df = pd.merge(new_df_200,new_df_body_200,how='inner',on='norm')

merge_df['mean'] = (merge_df['count_x'] + merge_df['count_y'])/2

merge_df = merge_df.sort_values(by='mean',ascending=False)

fig, ax = plt.subplots(nrows=4,ncols=1,figsize=(24,15))
sns.barplot(data=merge_df,x='norm',y='mean',ax=ax[0])
sns.barplot(data=merge_df.iloc[:40],x='norm',y='mean',ax=ax[1])
sns.barplot(data=merge_df.iloc[40:80],x='norm',y='mean',ax=ax[2])
sns.barplot(data=merge_df.iloc[80:],x='norm',y='mean',ax=ax[3])
plt.show()

"""# 기본 데이터 탐색

###2020년 07월 01부터 2020년 10월 12일까지
####커뮤니티별 조회수
"""

ax = sns.barplot(x='community',y='viewCount',data=real_title_df)
ax.set_title('커뮤니티 별 조회수 ')
plt.show()

real_title_df.groupby('community').mean()

"""#### 커뮤니티 별 댓글 수 """

ax = sns.barplot(x='community',y='commentCount',data=real_title_df)
ax.set_title('커뮤니티 별 댓글 수 ')
plt.show()

group_date_df = real_title_df.groupby('date').sum()

group_date_df= group_date_df.reset_index().sort_values(by='viewCount')
group_date_df= group_date_df.sort_values(by='viewCount',ascending=False)
group_date_df_2= group_date_df.sort_values(by='commentCount',ascending=False)

fig,ax = plt.subplots(nrows=2,ncols=1,figsize=(15,8))
sns.barplot(data=group_date_df.iloc[:50,:,],x='date',y='viewCount',ax=ax[0])
ax[0].tick_params(axis='x', labelrotation=-90)
sns.barplot(data=group_date_df.iloc[50:,:,],x='date',y='viewCount',ax=ax[1])
ax[1].tick_params(axis='x', labelrotation=-90)
# sns.barplot(data=group_date_df.iloc[50:,:,],x='date',y='commentCount',ax=ax[1])
# ax[1].tick_params(axis='x', labelrotation=-90)

# 날짜별 결과로는 08월 27일이 가장 많은 조회수와 9월 7일 순 # 8월 28일에 확줌

fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=group_date_df.iloc[:50,:,],x='date',y='viewCount')
ax.tick_params(axis='x', labelrotation=-90)

fig,ax = plt.subplots(nrows=2,ncols=1,figsize=(15,8))
sns.barplot(data=group_date_df_2.iloc[:50,:,],x='date',y='commentCount',ax=ax[0])
ax[0].tick_params(axis='x', labelrotation=-90)
sns.barplot(data=group_date_df_2.iloc[50:,:,],x='date',y='commentCount',ax=ax[1])
ax[1].tick_params(axis='x', labelrotation=-90)

# 코멘트 또한 8월 27일, 9월 17일 순  # 8월 28일에 확줌

fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=group_date_df_2.iloc[:50,:,],x='date',y='commentCount')
ax.tick_params(axis='x', labelrotation=-90)

real_title_df

"""## 커뮤니티에 따라서 어떤 단어가 노출 될까 ? 
### 인벤과 에펨코를 비교 

"""

title_ser = pd.Series(lst_2)
body_ser = pd.Series(lst_2_body)

title_new = pd.concat([title_ser,real_title_df],axis=1)
body_new = pd.concat([body_ser,real_title_df],axis=1)

real_title_df_inven=title_new[title_new['community']=='인벤']
real_body_df_inven=body_new[body_new['community']=='인벤']
real_title_df_fm=title_new[title_new['community']=='에펨코']
real_body_df_fm=body_new[body_new['community']=='에펨코']

title_inven_lst = real_title_df_inven.iloc[:,0]
body_inven_lst = real_body_df_inven.iloc[:,0]
title_fm_lst = real_title_df_fm.iloc[:,0]
body_fm_lst = real_body_df_fm.iloc[:,0]

title_inven_anal = []
for i in title_inven_lst:
  for w in i:
    title_inven_anal.append(w)

body_inven_anal = []
for i in body_inven_lst:
  for w in i:
    body_inven_anal.append(w)

title_fm_anal = []
for i in title_fm_lst:
  for w in i:
    title_fm_anal.append(w)

body_fm_anal = []
for i in body_fm_lst:
  for w in i:
    body_fm_anal.append(w)

# 개별 항목 카운트 하기 
title_counts_inven = pd.Series(title_inven_anal).value_counts()
body_counts_inven = pd.Series(body_inven_anal).value_counts()
title_counts_fm = pd.Series(title_fm_anal).value_counts()
body_counts_fm= pd.Series(body_fm_anal).value_counts()

# 인벤 제목 
title_counts_df_inven= pd.DataFrame(title_counts_inven)
new_df_inven = title_counts_df_inven.reset_index()
# 인벤 바디 
body_counts_df_inven= pd.DataFrame(body_counts_inven)
new_df_body_inven = body_counts_df_inven.reset_index()
# 에펨코 제목 
title_counts_df_fm= pd.DataFrame(title_counts_fm)
new_df_fm = title_counts_df_fm.reset_index()
#에펨코 파디 
body_counts_df_fm= pd.DataFrame(body_counts_fm)
new_df_body_fm = body_counts_df_fm.reset_index()

new_df_inven.columns = ['norm','count']

new_df_body_inven.columns = ['norm','count']
new_df_fm.columns = ['norm','count']
new_df_body_fm.columns = ['norm','count']

# 상위 200개 구간 
new_df_inven_200 = new_df_inven.iloc[:200,:]
new_df_body_inven_200=new_df_body_inven.iloc[:200,:]
new_df_fm_200=new_df_fm.iloc[:200,:]
new_df_body_fm_200=new_df_body_inven.iloc[:200,:]

visual(new_df_inven_200) # 인벤 타이틀 200

#인벤 타이틀 
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=new_df_inven_200.iloc[:50,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

visual(new_df_body_inven_200) # 인벤 바디 200

#인벤 바디 
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=new_df_body_inven_200.iloc[:50,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

#인벤 바디 
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=new_df_body_inven_200.iloc[50:100,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

visual(new_df_fm_200) #fm 제목 200

#fm 타이틀  
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=new_df_fm_200.iloc[:50,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

visual(new_df_body_fm_200) # fm body 200

#fm 바디 
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=new_df_body_fm_200.iloc[:50,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

#fm 바디 
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=new_df_body_fm_200.iloc[50:100,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

"""### 월마다 핫한 이슈는 무엇이였을까 """

title_new_df = title_new.copy()

title_new_df

lsssst = []
for i in range(len(title_new_df)):
    a = title_new_df['date'][i][0:2]
    lsssst.append(a)

lsssst

month = pd.Series(lsssst)

# 월 추출해서 기존 제목 데이터랑 합치기 
title_new_df = pd.concat([month,title_new_df],axis=1)

# 월 추출해서 기존 내용 데이터랑 합치기 
body_new_df = pd.concat([month,title_new],axis=1)
body_new_df

title_07 = title_new_df[title_new_df.iloc[:,0]=='07']
title_08= title_new_df[title_new_df.iloc[:,0]=='08']
title_09= title_new_df[title_new_df.iloc[:,0]=='09']
title_10= title_new_df[title_new_df.iloc[:,0]=='10']
body_07= body_new_df[body_new_df.iloc[:,0]=='07']
body_08= body_new_df[body_new_df.iloc[:,0]=='08']
body_09= body_new_df[body_new_df.iloc[:,0]=='09']
body_10= body_new_df[body_new_df.iloc[:,0]=='10']

title_07_lst = title_07.iloc[:,1]
title_08_lst = title_08.iloc[:,1]
title_09_lst = title_09.iloc[:,1]
title_10_lst = title_10.iloc[:,1]
body_07_lst = body_07.iloc[:,1]
body_08_lst = body_08.iloc[:,1]
body_09_lst = body_09.iloc[:,1]
body_10_lst = body_10.iloc[:,1]

def set_data(lst):
  lsts = []
  for i in lst:
    for w in i:
     lsts.append(w)

  counted = pd.Series(lsts).value_counts()    

  counted_df= pd.DataFrame(counted)
  new_df_ = counted_df.reset_index()

  new_df_.columns = ['norm','count']
  new_df_200 = new_df_.iloc[:200,:]

  return new_df_200

title_07_200 = set_data(title_07_lst)
title_08_200 = set_data(title_08_lst)
title_09_200 = set_data(title_09_lst)
title_10_200 = set_data(title_10_lst)
body_07_200 = set_data(body_07_lst)
body_08_200 = set_data(body_08_lst)
body_09_200 = set_data(body_09_lst)
body_10_200 = set_data(body_10_lst)

visual(title_07_200)

visual(title_08_200)

visual(title_09_200)

visual(title_10_200)

visual(body_07_200)

visual(body_08_200)

visual(body_09_200)

visual(body_10_200)

# 7월 타이틀 50
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=title_07_200.iloc[:50,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

#7월 바디 50
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=body_07_200.iloc[:50,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

#7월 바디 50-100
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=body_07_200.iloc[50:100,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

# 8월 타이틀 50
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=title_08_200.iloc[:50,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

# 8월 바디 50
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=body_08_200.iloc[:50,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

# 8월 바디 50-100
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=body_08_200.iloc[50:100,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

# 9월 타이틀 50
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=title_09_200.iloc[:50,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

# 9월 바디 50
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=body_09_200.iloc[:50,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

# 9월 바디 50-100
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=body_09_200.iloc[50:100,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

# 10월 타이틀 50
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=title_10_200.iloc[:50,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

# 10월 바디 50
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=body_10_200.iloc[:50,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

# 10월 바디 50-100
fig,ax = plt.subplots(nrows=1,ncols=1,figsize=(15,8))
sns.barplot(data=body_10_200.iloc[50:100,:,],x='norm',y='count')
ax.tick_params(axis='x', labelrotation=-90)

